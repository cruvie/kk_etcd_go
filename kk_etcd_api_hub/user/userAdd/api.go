// Code generated by kk_api_gen. DO NOT EDIT.

package userAdd

import (
	"gitee.com/cruvie/kk_go_kit/kk_http"
	"gitee.com/cruvie/kk_go_kit/kk_http/kk_global_stage"
	"gitee.com/cruvie/kk_go_kit/kk_stage"
	"github.com/gin-gonic/gin"
)

type api struct {
	stage *kk_stage.Stage
	In    *UserAdd_Input
}

func NewApi(stage *kk_stage.Stage) *api {
	return &api{
		stage: stage,
		In:    new(UserAdd_Input),
	}
}

//  Handler
//	@Tags			user
//	@ID				UserAdd
//	@Description	add user
//	@Accept			json,application/x-protobuf
//	@Produce		json,application/x-protobuf
//	@Param			UserAdd_Input	body		UserAdd_Input	true	"UserAdd_Input"
//	@Success		200				{object}	UserAdd_Output
//	@Router			/user/userAdd [post]
func Handler(c *gin.Context) {
		x := NewApi(kk_global_stage.GetRequestStage(c))
		span := x.stage.StartTrace("userAdd")
		defer span.End()
	
		if err := x.bindCheck(); err != nil {
			kk_http.WriteResponse(x.stage, err, nil)
			return
		}
		err, resp := x.Handler()
		kk_http.WriteResponse(x.stage, err, resp)
}