// Code generated by kk_api_gen. DO NOT EDIT.

package query

import (
	"gitee.com/cruvie/kk_go_kit/kk_http"
	"gitee.com/cruvie/kk_go_kit/kk_http/kk_global_stage"
	"gitee.com/cruvie/kk_go_kit/kk_stage"
	"github.com/gin-gonic/gin"
)

type api struct {
	stage *kk_stage.Stage
	in    *Query_Input
}

func newApi(c *gin.Context) *api {
	return &api{
		stage: kk_global_stage.GetRequestStage(c),
		in:    new(Query_Input),
	}
}

//	 Handler
//		@Tags			ai
//		@ID				Query
//		@Description	query ai
//		@Accept			json,application/x-protobuf
//		@Produce		json,application/x-protobuf
//		@Param			Query_Input	body		Query_Input	true	"Query_Input"
//		@Success		200			{object}	Query_Output
//		@Router			/ai/query [post]
func Handler(c *gin.Context) {
	x := newApi(c)
	span := x.stage.StartTrace("query")
	defer span.End()

	if err := x.bindCheck(x.stage); err != nil {
		kk_http.WriteResponse(x.stage, err, nil)
		return
	}
	err, resp := x.handler()
	kk_http.WriteResponse(x.stage, err, resp)
}
