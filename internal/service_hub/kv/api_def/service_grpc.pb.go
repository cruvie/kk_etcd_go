// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: internal/service_hub/kv/api_def/service.proto

package api_def

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KV_KVDel_FullMethodName  = "/kk_etcd.KV/KVDel"
	KV_KVGet_FullMethodName  = "/kk_etcd.KV/KVGet"
	KV_KVList_FullMethodName = "/kk_etcd.KV/KVList"
	KV_KVPut_FullMethodName  = "/kk_etcd.KV/KVPut"
)

// KVClient is the client API for KV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVClient interface {
	KVDel(ctx context.Context, in *KVDel_Input, opts ...grpc.CallOption) (*KVDel_Output, error)
	KVGet(ctx context.Context, in *KVGet_Input, opts ...grpc.CallOption) (*KVGet_Output, error)
	KVList(ctx context.Context, in *KVList_Input, opts ...grpc.CallOption) (*KVList_Output, error)
	KVPut(ctx context.Context, in *KVPut_Input, opts ...grpc.CallOption) (*KVPut_Output, error)
}

type kVClient struct {
	cc grpc.ClientConnInterface
}

func NewKVClient(cc grpc.ClientConnInterface) KVClient {
	return &kVClient{cc}
}

func (c *kVClient) KVDel(ctx context.Context, in *KVDel_Input, opts ...grpc.CallOption) (*KVDel_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KVDel_Output)
	err := c.cc.Invoke(ctx, KV_KVDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) KVGet(ctx context.Context, in *KVGet_Input, opts ...grpc.CallOption) (*KVGet_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KVGet_Output)
	err := c.cc.Invoke(ctx, KV_KVGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) KVList(ctx context.Context, in *KVList_Input, opts ...grpc.CallOption) (*KVList_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KVList_Output)
	err := c.cc.Invoke(ctx, KV_KVList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) KVPut(ctx context.Context, in *KVPut_Input, opts ...grpc.CallOption) (*KVPut_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KVPut_Output)
	err := c.cc.Invoke(ctx, KV_KVPut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVServer is the server API for KV service.
// All implementations must embed UnimplementedKVServer
// for forward compatibility.
type KVServer interface {
	KVDel(context.Context, *KVDel_Input) (*KVDel_Output, error)
	KVGet(context.Context, *KVGet_Input) (*KVGet_Output, error)
	KVList(context.Context, *KVList_Input) (*KVList_Output, error)
	KVPut(context.Context, *KVPut_Input) (*KVPut_Output, error)
	mustEmbedUnimplementedKVServer()
}

// UnimplementedKVServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKVServer struct{}

func (UnimplementedKVServer) KVDel(context.Context, *KVDel_Input) (*KVDel_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVDel not implemented")
}
func (UnimplementedKVServer) KVGet(context.Context, *KVGet_Input) (*KVGet_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVGet not implemented")
}
func (UnimplementedKVServer) KVList(context.Context, *KVList_Input) (*KVList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVList not implemented")
}
func (UnimplementedKVServer) KVPut(context.Context, *KVPut_Input) (*KVPut_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KVPut not implemented")
}
func (UnimplementedKVServer) mustEmbedUnimplementedKVServer() {}
func (UnimplementedKVServer) testEmbeddedByValue()            {}

// UnsafeKVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVServer will
// result in compilation errors.
type UnsafeKVServer interface {
	mustEmbedUnimplementedKVServer()
}

func RegisterKVServer(s grpc.ServiceRegistrar, srv KVServer) {
	// If the following call pancis, it indicates UnimplementedKVServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KV_ServiceDesc, srv)
}

func _KV_KVDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVDel_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).KVDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KV_KVDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).KVDel(ctx, req.(*KVDel_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_KVGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVGet_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).KVGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KV_KVGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).KVGet(ctx, req.(*KVGet_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_KVList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).KVList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KV_KVList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).KVList(ctx, req.(*KVList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_KVPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVPut_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).KVPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KV_KVPut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).KVPut(ctx, req.(*KVPut_Input))
	}
	return interceptor(ctx, in, info, handler)
}

// KV_ServiceDesc is the grpc.ServiceDesc for KV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kk_etcd.KV",
	HandlerType: (*KVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KVDel",
			Handler:    _KV_KVDel_Handler,
		},
		{
			MethodName: "KVGet",
			Handler:    _KV_KVGet_Handler,
		},
		{
			MethodName: "KVList",
			Handler:    _KV_KVList_Handler,
		},
		{
			MethodName: "KVPut",
			Handler:    _KV_KVPut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/service_hub/kv/api_def/service.proto",
}
