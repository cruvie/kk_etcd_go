// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: internal/service_hub/role/api_def/service.proto

package api_def

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Role_RoleAdd_FullMethodName              = "/api_def.Role/RoleAdd"
	Role_RoleDelete_FullMethodName           = "/api_def.Role/RoleDelete"
	Role_RoleGet_FullMethodName              = "/api_def.Role/RoleGet"
	Role_RoleGrantPermission_FullMethodName  = "/api_def.Role/RoleGrantPermission"
	Role_RoleList_FullMethodName             = "/api_def.Role/RoleList"
	Role_RoleRevokePermission_FullMethodName = "/api_def.Role/RoleRevokePermission"
)

// RoleClient is the client API for Role service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleClient interface {
	RoleAdd(ctx context.Context, in *RoleAdd_Input, opts ...grpc.CallOption) (*RoleAdd_Output, error)
	RoleDelete(ctx context.Context, in *RoleDelete_Input, opts ...grpc.CallOption) (*RoleDelete_Output, error)
	RoleGet(ctx context.Context, in *RoleGet_Input, opts ...grpc.CallOption) (*RoleGet_Output, error)
	RoleGrantPermission(ctx context.Context, in *RoleGrantPermission_Input, opts ...grpc.CallOption) (*RoleGrantPermission_Output, error)
	RoleList(ctx context.Context, in *RoleList_Input, opts ...grpc.CallOption) (*RoleList_Output, error)
	RoleRevokePermission(ctx context.Context, in *RoleRevokePermission_Input, opts ...grpc.CallOption) (*RoleRevokePermission_Output, error)
}

type roleClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleClient(cc grpc.ClientConnInterface) RoleClient {
	return &roleClient{cc}
}

func (c *roleClient) RoleAdd(ctx context.Context, in *RoleAdd_Input, opts ...grpc.CallOption) (*RoleAdd_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleAdd_Output)
	err := c.cc.Invoke(ctx, Role_RoleAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) RoleDelete(ctx context.Context, in *RoleDelete_Input, opts ...grpc.CallOption) (*RoleDelete_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleDelete_Output)
	err := c.cc.Invoke(ctx, Role_RoleDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) RoleGet(ctx context.Context, in *RoleGet_Input, opts ...grpc.CallOption) (*RoleGet_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleGet_Output)
	err := c.cc.Invoke(ctx, Role_RoleGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) RoleGrantPermission(ctx context.Context, in *RoleGrantPermission_Input, opts ...grpc.CallOption) (*RoleGrantPermission_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleGrantPermission_Output)
	err := c.cc.Invoke(ctx, Role_RoleGrantPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) RoleList(ctx context.Context, in *RoleList_Input, opts ...grpc.CallOption) (*RoleList_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleList_Output)
	err := c.cc.Invoke(ctx, Role_RoleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) RoleRevokePermission(ctx context.Context, in *RoleRevokePermission_Input, opts ...grpc.CallOption) (*RoleRevokePermission_Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleRevokePermission_Output)
	err := c.cc.Invoke(ctx, Role_RoleRevokePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServer is the server API for Role service.
// All implementations must embed UnimplementedRoleServer
// for forward compatibility.
type RoleServer interface {
	RoleAdd(context.Context, *RoleAdd_Input) (*RoleAdd_Output, error)
	RoleDelete(context.Context, *RoleDelete_Input) (*RoleDelete_Output, error)
	RoleGet(context.Context, *RoleGet_Input) (*RoleGet_Output, error)
	RoleGrantPermission(context.Context, *RoleGrantPermission_Input) (*RoleGrantPermission_Output, error)
	RoleList(context.Context, *RoleList_Input) (*RoleList_Output, error)
	RoleRevokePermission(context.Context, *RoleRevokePermission_Input) (*RoleRevokePermission_Output, error)
	mustEmbedUnimplementedRoleServer()
}

// UnimplementedRoleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoleServer struct{}

func (UnimplementedRoleServer) RoleAdd(context.Context, *RoleAdd_Input) (*RoleAdd_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleAdd not implemented")
}
func (UnimplementedRoleServer) RoleDelete(context.Context, *RoleDelete_Input) (*RoleDelete_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDelete not implemented")
}
func (UnimplementedRoleServer) RoleGet(context.Context, *RoleGet_Input) (*RoleGet_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleGet not implemented")
}
func (UnimplementedRoleServer) RoleGrantPermission(context.Context, *RoleGrantPermission_Input) (*RoleGrantPermission_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleGrantPermission not implemented")
}
func (UnimplementedRoleServer) RoleList(context.Context, *RoleList_Input) (*RoleList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}
func (UnimplementedRoleServer) RoleRevokePermission(context.Context, *RoleRevokePermission_Input) (*RoleRevokePermission_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleRevokePermission not implemented")
}
func (UnimplementedRoleServer) mustEmbedUnimplementedRoleServer() {}
func (UnimplementedRoleServer) testEmbeddedByValue()              {}

// UnsafeRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServer will
// result in compilation errors.
type UnsafeRoleServer interface {
	mustEmbedUnimplementedRoleServer()
}

func RegisterRoleServer(s grpc.ServiceRegistrar, srv RoleServer) {
	// If the following call pancis, it indicates UnimplementedRoleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Role_ServiceDesc, srv)
}

func _Role_RoleAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAdd_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).RoleAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_RoleAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).RoleAdd(ctx, req.(*RoleAdd_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_RoleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDelete_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).RoleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_RoleDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).RoleDelete(ctx, req.(*RoleDelete_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_RoleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleGet_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).RoleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_RoleGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).RoleGet(ctx, req.(*RoleGet_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_RoleGrantPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleGrantPermission_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).RoleGrantPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_RoleGrantPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).RoleGrantPermission(ctx, req.(*RoleGrantPermission_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_RoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).RoleList(ctx, req.(*RoleList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_RoleRevokePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRevokePermission_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).RoleRevokePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_RoleRevokePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).RoleRevokePermission(ctx, req.(*RoleRevokePermission_Input))
	}
	return interceptor(ctx, in, info, handler)
}

// Role_ServiceDesc is the grpc.ServiceDesc for Role service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Role_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_def.Role",
	HandlerType: (*RoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoleAdd",
			Handler:    _Role_RoleAdd_Handler,
		},
		{
			MethodName: "RoleDelete",
			Handler:    _Role_RoleDelete_Handler,
		},
		{
			MethodName: "RoleGet",
			Handler:    _Role_RoleGet_Handler,
		},
		{
			MethodName: "RoleGrantPermission",
			Handler:    _Role_RoleGrantPermission_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _Role_RoleList_Handler,
		},
		{
			MethodName: "RoleRevokePermission",
			Handler:    _Role_RoleRevokePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/service_hub/role/api_def/service.proto",
}
